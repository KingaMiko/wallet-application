{"version":3,"file":"static/js/585.7e4f4432.chunk.js","mappings":"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","sources":["webpack://wallet-application/./src/components/ActiveNavLink/ActiveNavLink.module.scss?c0df","components/ActiveNavLink/ActiveNavLink.jsx","webpack://wallet-application/./src/components/Balance/Balance.module.scss?bde2","components/Balance/Balance.jsx","webpack://wallet-application/./src/components/CurrencyTable/CurrencyTable.module.scss?daa9","components/CurrencyTable/CurrencyTable.jsx","webpack://wallet-application/./src/components/Navigation/Navigation.module.scss?a7be","components/Navigation/Navigation.jsx","webpack://wallet-application/./src/components/Navigation/NavigationMobile.module.scss?4239","components/Navigation/NavigationMobile.jsx","webpack://wallet-application/./src/pages/Home/Home.module.scss?ce6f","webpack://wallet-application/./src/components/TransactionsManager/Transactions/Transactions.module.scss?167d","webpack://wallet-application/./src/components/TransactionsManager/ModalConfirmDelete/ModalConfirmDelete.module.scss?ba25","components/TransactionsManager/ModalConfirmDelete/ModalConfirmDelete.jsx","components/TransactionsManager/Transactions/Transactions.jsx","webpack://wallet-application/./src/components/TransactionsManager/ModalAddTransaction/ModalAddTransaction.module.scss?a3a7","components/TransactionsManager/ModalAddTransaction/ModalAddTransaction.jsx","webpack://wallet-application/./src/components/TransactionsManager/ModalEditTransaction/ModalEditTransaction.module.scss?51da","components/TransactionsManager/ModalEditTransaction/ModalEditTransaction.jsx","components/TransactionsManager/TransactionManager.jsx","webpack://wallet-application/./src/components/ButtonAddTransactions/ButtonAddTransactions.module.scss?2b0c","components/ButtonAddTransactions/ButtonAddTransactions.jsx","pages/Home/Home.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"link\":\"ActiveNavLink_link__Srke3\",\"active\":\"ActiveNavLink_active__uzCgI\"};","import React from 'react';\nimport { NavLink, useMatch, useResolvedPath } from 'react-router-dom';\nimport css from './ActiveNavLink.module.scss';\n\nconst ActiveNavLink = ({ to, children }) => {\n  const resolvedPath = useResolvedPath(to);\n  const isActive = useMatch({ path: resolvedPath.pathname, end: true });\n\n  const linkClass = isActive ? css.active : css.link;\n\n  return (\n    <NavLink to={to} className={linkClass}>\n      {children}\n    </NavLink>\n  );\n};\n\nexport default ActiveNavLink;\n","// extracted by mini-css-extract-plugin\nexport default {\"balance\":\"Balance_balance__tUx3D\",\"title\":\"Balance_title__aUwwk\",\"amount\":\"Balance_amount__t4xet\"};","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport css from './Balance.module.scss';\nimport { selectUserDetails } from 'redux/session/selectors';\nimport { getUserDetails } from 'redux/session/operations';\n\nexport const Balance = () => {\n  const dispatch = useDispatch();\n  const userDetails = useSelector(selectUserDetails);\n  const userBalance = userDetails ? userDetails.balance : 0;\n\n  useEffect(() => {\n    dispatch(getUserDetails());\n  }, [dispatch]);\n\n  return (\n    <div className={css.balance}>\n      <p className={css.title}>YOUR BALANCE</p>\n      <p className={css.amount}>PLN {userBalance}</p>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"tableBg\":\"CurrencyTable_tableBg__nplZ5\",\"currencyTable\":\"CurrencyTable_currencyTable__1iH+4\"};","import React, { useState, useEffect } from 'react';\nimport css from './CurrencyTable.module.scss';\n\nimport { walletInstance } from 'utils/api';\n\nexport const CurrencyTable = () => {\n  const [currencies, setCurrencies] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await walletInstance.get('/currencies');\n\n        setCurrencies(response.data.data.currencies);\n      } catch (error) {\n        console.error('Error fetching currencies', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div className={css.tableBg}>\n      <table className={css.currencyTable}>\n        <thead className={css.currencyTableHead}>\n          <tr>\n            <th>Currency</th>\n            <th>Purchase</th>\n            <th>Sell</th>\n          </tr>\n        </thead>\n        <tbody className={css.currencyTableBody}>\n          {currencies.map(currency => (\n            <tr key={currency._id}>\n              <td>{currency.code}</td>\n              <td>{currency.bid}</td>\n              <td>{currency.ask}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"icon\":\"Navigation_icon__lPT0N\"};","import React from 'react';\nimport ActiveNavLink from '../ActiveNavLink/ActiveNavLink';\nimport css from './Navigation.module.scss';\nimport sprite from 'images/icons.svg';\n\nconst Navigation = () => {\n  return (\n    <nav>\n      <ul className={css.navigation}>\n        <li>\n          <ActiveNavLink to=\"/home\">\n            <svg className={css.icon} width=\"38px\" height=\"38px\">\n              <use href={`${sprite}#icon-home3`}></use>\n            </svg>\n            Home\n          </ActiveNavLink>\n        </li>\n        <li>\n          <ActiveNavLink to=\"/statistics\">\n            <svg className={css.icon} width=\"38px\" height=\"38px\">\n              <use href={`${sprite}#icon-baseline-timeline`}></use>\n            </svg>\n            Statistics\n          </ActiveNavLink>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","// extracted by mini-css-extract-plugin\nexport default {\"navigation\":\"NavigationMobile_navigation__mkvLU\"};","import React from 'react';\nimport ActiveNavLink from '../ActiveNavLink/ActiveNavLink';\nimport css from './NavigationMobile.module.scss';\nimport sprite from 'images/icons.svg';\n\nconst NavigationMobile = () => {\n  return (\n    <nav>\n      <ul className={css.navigation}>\n        <li>\n          <ActiveNavLink to=\"/home\">\n            <svg className={css.icon} width=\"38px\" height=\"38px\">\n              <use href={`${sprite}#icon-home3`}></use>\n            </svg>\n          </ActiveNavLink>\n        </li>\n        <li>\n          <ActiveNavLink to=\"/statistics\">\n            <svg className={css.icon} width=\"38px\" height=\"38px\">\n              <use href={`${sprite}#icon-baseline-timeline`}></use>\n            </svg>\n          </ActiveNavLink>\n        </li>\n        <li>\n          <ActiveNavLink to=\"/currency\">\n            <svg className={css.icon} width=\"38px\" height=\"38px\">\n              <use href={`${sprite}#icon-home3`}></use>\n            </svg>\n          </ActiveNavLink>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default NavigationMobile;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"Home_background__w4mTu\",\"wrapper\":\"Home_wrapper__53Los\",\"mainMobile\":\"Home_mainMobile__FYfgM\",\"mainTabletAndDesktop\":\"Home_mainTabletAndDesktop__EA5yb\",\"sidebar\":\"Home_sidebar__74EFX\",\"main\":\"Home_main__4+rG5\"};","// extracted by mini-css-extract-plugin\nexport default {\"tableBg\":\"Transactions_tableBg__zIQxE\",\"transactionsTable\":\"Transactions_transactionsTable__83vc7\",\"transactionsTableHead\":\"Transactions_transactionsTableHead__8+gku\",\"transactionsTablebody\":\"Transactions_transactionsTablebody__5CQS8\",\"thName\":\"Transactions_thName__3q6MS\",\"iconSort\":\"Transactions_iconSort__6FlXB\",\"sumSection\":\"Transactions_sumSection__rkTQ1\",\"iconTransactions\":\"Transactions_iconTransactions__lZpcx\",\"amountPlus\":\"Transactions_amountPlus__gFaHt\",\"amountMinus\":\"Transactions_amountMinus__4FyfO\",\"tablePlus\":\"Transactions_tablePlus__VfqW1\",\"tableMinus\":\"Transactions_tableMinus__Li-bx\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalConfirmDelete_modal__h1p0a\",\"modal__overlay\":\"ModalConfirmDelete_modal__overlay__C6aKg\",\"modal__close\":\"ModalConfirmDelete_modal__close__-sOJz\",\"modal__title\":\"ModalConfirmDelete_modal__title__GTUI3\",\"btn_container\":\"ModalConfirmDelete_btn_container__4476O\"};","import { Button } from 'components';\nimport css from './ModalConfirmDelete.module.scss';\nimport sprite from '../../../images/icons.svg';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsModalConfirmDeleteOpen } from 'redux/global/selectors';\nimport { setIsModalConfirmDeleteOpen } from 'redux/global/globalSlice';\n\nexport const ModalConfirmDelete = ({ onConfirm }) => {\n  const dispatch = useDispatch();\n  const isModalConfirmDeleteOpen = useSelector(selectIsModalConfirmDeleteOpen);\n\n  const handleClose = () => {\n    dispatch(setIsModalConfirmDeleteOpen(false));\n  };\n\n  return isModalConfirmDeleteOpen ? (\n    <div className={css.modal__overlay}>\n      <div className={css.modal}>\n        <div>\n          <h5 className={css.modal__title}>\n            Are you sure you want to delete this transaction?{' '}\n            <p>*This action cannot be undone.</p>\n          </h5>\n          <button\n            type=\"button\"\n            className={css.modal__close}\n            onClick={handleClose}\n          >\n            <svg width=\"16px\" height=\"16px\">\n              <use href={`${sprite}#icon-close`}></use>\n            </svg>\n          </button>\n          <div className={css.btn_container}>\n            <Button type=\"button\" theme=\"color\" onClick={onConfirm}>\n              Yes, Delete\n            </Button>\n\n            <Button type=\"button\" theme=\"white\" onClick={handleClose}>\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  ) : null;\n};\n","import React from 'react';\nimport css from './Transactions.module.scss';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport sprite from 'images/icons.svg';\nimport { setIsModalConfirmDeleteOpen } from 'redux/global/globalSlice';\nimport { ModalConfirmDelete } from '../ModalConfirmDelete/ModalConfirmDelete';\n\nexport const Transactions = ({ transactions, onDelete, onEdit }) => {\n  const [sortOrder, setSortOrder] = useState({\n    column: null,\n    direction: 'asc',\n  });\n\n  const [selectedTransactionId, setSelectedTransactionId] = useState(null);\n  const dispatch = useDispatch();\n\n  const getAmountClass = type => {\n    return type === 'Income'\n      ? css.amountPlus\n      : type === 'Expense'\n      ? css.amountMinus\n      : '';\n  };\n\n  const handleSort = sortColumn => {\n    const direction =\n      sortColumn === sortOrder.column && sortOrder.direction === 'asc'\n        ? 'desc'\n        : 'asc';\n    setSortOrder({ column: sortColumn, direction });\n  };\n\n  const handleDelete = transactionId => {\n    setSelectedTransactionId(transactionId);\n    dispatch(setIsModalConfirmDeleteOpen(true));\n  };\n  const confirmDelete = () => {\n    onDelete(selectedTransactionId);\n    dispatch(setIsModalConfirmDeleteOpen(false));\n  };\n\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    const day = date.getDate().toString().padStart(2, '0');\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const year = date.getFullYear();\n\n    return `${day}-${month}-${year}`;\n  };\n\n  const formatType = type => {\n    if (type === 'Expense') {\n      return <span className={css.tableMinus}>-</span>;\n    } else if (type === 'Income') {\n      return <span className={css.tablePlus}>+</span>;\n    }\n    return type;\n  };\n\n  return (\n    <div className={css.tableBg}>\n      <ModalConfirmDelete onConfirm={confirmDelete} />\n      <table className={css.transactionsTable}>\n        <thead className={css.transactionsTableHead}>\n          <tr>\n            <th onClick={() => handleSort(0)} title=\"Sort\">\n              <div className={css.thName}>\n                <span>Date</span>\n                <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n                  <use href={`${sprite}#icon-sort`}></use>\n                </svg>\n              </div>\n            </th>\n            <th onClick={() => handleSort(1)} title=\"Sort\">\n              <div className={css.thName}>\n                <span>Type</span>\n                <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n                  <use href={`${sprite}#icon-sort`}></use>\n                </svg>\n              </div>\n            </th>\n            <th onClick={() => handleSort(2)} title=\"Sort\">\n              <div className={css.thName}>\n                <span>Category</span>\n                <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n                  <use href={`${sprite}#icon-sort`}></use>\n                </svg>\n              </div>\n            </th>\n            <th onClick={() => handleSort(3)} title=\"Sort\">\n              <div className={css.thName}>\n                <span>Comment</span>\n                <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n                  <use href={`${sprite}#icon-sort`}></use>\n                </svg>\n              </div>\n            </th>\n            <th onClick={() => handleSort(4)} title=\"Sort\">\n              <div className={css.thName}>\n                <span>Amount</span>\n                <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n                  <use href={`${sprite}#icon-sort`}></use>\n                </svg>\n              </div>\n            </th>\n            <th>Options</th>\n          </tr>\n        </thead>\n        <tbody>\n          {transactions.map(transaction => (\n            <tr key={transaction._id}>\n              <td>{formatDate(transaction.date)}</td>\n              <td>{formatType(transaction.type)}</td>\n              <td>{transaction.category}</td>\n              <td>{transaction.comment}</td>\n              <td className={getAmountClass(transaction.type)}>\n                {transaction.sum}\n              </td>\n              <td>\n                <svg\n                  className={css.iconTransactions}\n                  width=\"20px\"\n                  height=\"20px\"\n                  onClick={() => onEdit(transaction)}\n                >\n                  <use href={`${sprite}#icon-pencil2`}></use>\n                </svg>\n                <svg\n                  className={css.iconTransactions}\n                  width=\"20px\"\n                  height=\"20px\"\n                  onClick={() => handleDelete(transaction._id)}\n                >\n                  <use href={`${sprite}#icon-bin`}></use>\n                </svg>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import css from './Transactions.module.scss';\n// import sprite from 'images/icons.svg';\n// import { getUserDetails } from 'redux/session/operations';\n// import { selectUserDetails } from 'redux/session/selectors';\n\n// import { walletInstance } from 'utils/api';\n\n// export const Transactions = ({\n//   transactions,\n//   deleteTransaction,\n//   editTransaction,\n// }) => {\n// const [, setSums] = useState({ sumPlus: 0, sumMinus: 0, balance: 0 });\n// const [sortOrder, setSortOrder] = useState({\n//   column: null,\n//   direction: 'asc',\n// });\n// const dispatch = useDispatch();\n// const userDetails = useSelector(selectUserDetails);\n// const userBalance = userDetails ? userDetails.balance : 0;\n\n// useEffect(() => {\n//   dispatch(getUserDetails());\n// }, [dispatch, transactions, deleteTransaction]);\n\n// const calculateSums = useCallback(() => {\n//   let sumPlus = 0;\n//   let sumMinus = 0;\n\n//   transactions.forEach(transaction => {\n//     const amount = parseFloat(transaction.sum);\n//     if (transaction.type === 'Income') {\n//       sumPlus += amount;\n//     } else if (transaction.type === 'Expense') {\n//       sumMinus += amount;\n//     }\n//   });\n\n//   return { sumPlus, sumMinus, balance: sumPlus - sumMinus };\n// }, [transactions]);\n\n// useEffect(() => {\n//   const { sumPlus, sumMinus, balance } = calculateSums();\n//   setSums({ sumPlus, sumMinus, balance });\n// }, [transactions, calculateSums]);\n\n// const getAmountClass = type => {\n//   return type === 'Income'\n//     ? css.amountPlus\n//     : type === 'Expense'\n//     ? css.amountMinus\n//     : '';\n// };\n\n// const handleSort = sortColumn => {\n//   const direction =\n//     sortColumn === sortOrder.column && sortOrder.direction === 'asc'\n//       ? 'desc'\n//       : 'asc';\n//   setSortOrder({ column: sortColumn, direction });\n// };\n\n// const sortedTransactions = [...transactions].sort((a, b) => {\n//   let valueA, valueB;\n//   if (sortOrder.column === 4) {\n//     valueA = parseFloat(a.sum);\n//     valueB = parseFloat(b.sum);\n//   } else if (sortOrder.column === 0) {\n//     valueA = new Date(a.date);\n//     valueB = new Date(b.date);\n//   } else {\n//     valueA = a[sortOrder.column];\n//     valueB = b[sortOrder.column];\n//   }\n\n//   return sortOrder.direction === 'asc'\n//     ? valueA > valueB\n//       ? 1\n//       : -1\n//     : valueA < valueB\n//     ? 1\n//     : -1;\n// });\n\n// const { sumPlus, sumMinus } = calculateSums();\n\n//   const handleEdit = transactionId => {\n//     const transactionToEdit = transactions.find(t => t._id === transactionId);\n//     if (transactionToEdit) {\n//       editTransaction(transactionToEdit);\n//     }\n//   };\n\n//   const handleDelete = async transactionId => {\n//     try {\n//       const response = await walletInstance.delete(\n//         `/transactions/${transactionId}`\n//       );\n//       if (response.status === 200) {\n//         deleteTransaction(transactionId);\n//       } else {\n//         console.error('Error deleting transaction');\n//       }\n//     } catch (error) {\n//       console.error('Error deleting transaction', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div className={css.tableBg}>\n//         <table className={css.transactionsTable}>\n//           <thead className={css.transactionsTableHead}>\n//             <tr>\n//               <th onClick={() => handleSort(0)} title=\"Sort\">\n//                 <div className={css.thName}>\n//                   <span>Date</span>\n// //                   <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n// //                     <use href={`${sprite}#icon-sort`}></use>\n// //                   </svg>\n// //                 </div>\n// //               </th>\n//               <th onClick={() => handleSort(1)} title=\"Sort\">\n//                 <div className={css.thName}>\n//                   <span>Type</span>\n//                   <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n//                     <use href={`${sprite}#icon-sort`}></use>\n//                   </svg>\n//                 </div>\n//               </th>\n//               <th onClick={() => handleSort(2)} title=\"Sort\">\n//                 <div className={css.thName}>\n//                   <span>Category</span>\n//                   <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n//                     <use href={`${sprite}#icon-sort`}></use>\n//                   </svg>\n//                 </div>\n//               </th>\n//               <th onClick={() => handleSort(3)} title=\"Sort\">\n//                 <div className={css.thName}>\n//                   <span>Comment</span>\n//                   <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n//                     <use href={`${sprite}#icon-sort`}></use>\n//                   </svg>\n//                 </div>\n//               </th>\n//               <th onClick={() => handleSort(4)} title=\"Sort\">\n//                 <div className={css.thName}>\n//                   <span>Amount</span>\n//                   <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n//                     <use href={`${sprite}#icon-sort`}></use>\n//                   </svg>\n//                 </div>\n//               </th>\n//               <th>Options</th>\n//             </tr>\n//           </thead>\n//           <tbody className={css.transactionsTableBody}>\n//             {sortedTransactions.map(transaction => (\n//               <tr key={transaction._id}>\n//                 <td>{transaction.date}</td>\n//                 <td>{transaction.type}</td>\n//                 <td>{transaction.category}</td>\n//                 <td>{transaction.comment}</td>\n//                 <td className={getAmountClass(transaction.type)}>\n//                   {transaction.sum}\n//                 </td>\n//                 <td>\n// <svg\n//   className={css.iconTransactions}\n//   width=\"20px\"\n//   height=\"20px\"\n//   onClick={() => handleEdit(transaction._id)}\n// >\n//   <use href={`${sprite}#icon-pencil2`}></use>\n// </svg>\n// <svg\n//   className={css.iconTransactions}\n//   width=\"20px\"\n//   height=\"20px\"\n//   onClick={() => handleDelete(transaction.id)}\n// >\n//   <use href={`${sprite}#icon-bin`}></use>\n// </svg>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//       <div className={css.sumSection}>\n//         <p>Incomes: {sumPlus.toFixed(2)}</p>\n//         <p>Expenses: {sumMinus.toFixed(2)}</p>\n//         <p>Balance: {userBalance}</p>\n//       </div>\n//     </div>\n//   );\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalAddTransaction_modal__92Wan\",\"modal__close\":\"ModalAddTransaction_modal__close__2oFKS\",\"modal__title\":\"ModalAddTransaction_modal__title__lkrl8\",\"form__label\":\"ModalAddTransaction_form__label__pL9sF\",\"form__checkbox_container\":\"ModalAddTransaction_form__checkbox_container__Ewtgx\",\"form__checkbox_label\":\"ModalAddTransaction_form__checkbox_label__fP5ud\",\"form__checkbox_label_expense\":\"ModalAddTransaction_form__checkbox_label_expense__Pkkrh\",\"form__checkbox_label_income\":\"ModalAddTransaction_form__checkbox_label_income__1jimB\",\"form__checkbox_input\":\"ModalAddTransaction_form__checkbox_input__mqlbb\",\"form__checkbox_custom\":\"ModalAddTransaction_form__checkbox_custom__TZ4ho\",\"form__slider\":\"ModalAddTransaction_form__slider__UGKmj\",\"form__input\":\"ModalAddTransaction_form__input__mcnWJ\",\"form__input_flex\":\"ModalAddTransaction_form__input_flex__JnydG\",\"form__date\":\"ModalAddTransaction_form__date__7R5ye\",\"form__flex_container\":\"ModalAddTransaction_form__flex_container__agrkZ\",\"form__category\":\"ModalAddTransaction_form__category__9vIwc\",\"form__category_active\":\"ModalAddTransaction_form__category_active__eIpA1\",\"form__btn_container\":\"ModalAddTransaction_form__btn_container__Lecm6\",\"error_message\":\"ModalAddTransaction_error_message__J5jVO\",\"modal__overlay\":\"ModalAddTransaction_modal__overlay__5muZL\"};","import * as Yup from 'yup';\n\nimport Datetime from 'react-datetime';\nimport { toast } from 'react-toastify';\nimport 'react-datetime/css/react-datetime.css';\nimport { Formik, Field, ErrorMessage, Form } from 'formik';\nimport { walletInstance } from 'utils/api';\n\nimport { Button } from 'components';\nimport css from './ModalAddTransaction.module.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setIsModalAddTransactionOpen } from 'redux/global/globalSlice';\nimport { selectIsModalAddTransactionOpen } from 'redux/global/selectors';\nimport { selectUserCategories } from 'redux/finance/selectors';\nimport sprite from '../../../images/icons.svg';\n\nexport const AddTransactionModal = ({ addTransaction }) => {\n  const initialValues = {\n    type: false,\n    sum: '',\n    category: '',\n    date: new Date(),\n    comment: '',\n  };\n\n  const validationSchema = Yup.object().shape({\n    type: Yup.string(),\n    sum: Yup.number()\n      .positive('Sum must be a positive number')\n      .required('Sum is required'),\n    category: Yup.string().required('Category is required'),\n    date: Yup.date().required('Date is required'),\n    comment: Yup.string(),\n  });\n\n  const dispatch = useDispatch();\n  const isAddTransactionModalOpen = useSelector(\n    selectIsModalAddTransactionOpen\n  );\n  const userCategories = useSelector(selectUserCategories);\n\n  const handleCloseAddTransactionModal = () => {\n    dispatch(setIsModalAddTransactionOpen(false));\n  };\n\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n    setSubmitting(true);\n    try {\n      const valuesToSend = {\n        sum: values.sum,\n        date: values.date.toISOString(),\n        type: values.type ? 'Income' : 'Expense',\n        category: values.category,\n        comment: values.comment,\n      };\n      console.log(valuesToSend.date);\n      const response = await walletInstance.post('/transactions', valuesToSend);\n      if (response.status === 201) {\n        console.log('Transaction added successfully!', response.data);\n        addTransaction(response.data);\n        toast.success('Transaction added successfully!');\n      } else {\n        toast.error('Error adding transaction. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error adding transaction:', error);\n      toast.error('Error adding transaction. Please try again.');\n    } finally {\n      setSubmitting(false);\n      resetForm();\n      handleCloseAddTransactionModal();\n    }\n  };\n\n  return isAddTransactionModalOpen ? (\n    <div className={css.modal__overlay}>\n      <div className={css.modal}>\n        <div>\n          <h5 className={css.modal__title}>Add Transaction</h5>\n          <button\n            type=\"button\"\n            className={css.modal__close}\n            onClick={handleCloseAddTransactionModal}\n          >\n            <svg width=\"16px\" height=\"16px\">\n              <use href={`${sprite}#icon-close`}></use>\n            </svg>\n          </button>\n        </div>\n        <div>\n          <Formik\n            initialValues={initialValues}\n            onSubmit={handleSubmit}\n            validationSchema={validationSchema}\n          >\n            {({\n              isSubmitting,\n              handleSubmit,\n              setFieldValue,\n              values,\n              setValues,\n              setErrors,\n            }) => (\n              <Form onSubmit={handleSubmit}>\n                <div className={css.form__checkbox_container}>\n                  <label className={css.form__checkbox_label}>\n                    <span\n                      htmlFor=\"type\"\n                      className={`${css.form__checkbox_label} ${\n                        values.type === true\n                          ? css.form__checkbox_label_income\n                          : null\n                      }`}\n                    >\n                      Income\n                    </span>\n\n                    <Field\n                      type=\"checkbox\"\n                      name=\"type\"\n                      id=\"type\"\n                      onClick={() => {\n                        setValues({\n                          ...initialValues,\n                          type: values.type,\n                        });\n                        setErrors({});\n                      }}\n                      className={css.form__checkbox_input}\n                    />\n                    <div className={css.form__checkbox_custom}>\n                      <div className={css.form__slider}>\n                        {values.type === false ? '-' : '+'}\n                      </div>\n                    </div>\n\n                    <span\n                      htmlFor=\"type\"\n                      className={`${css.form__checkbox_label} ${\n                        values.type === false\n                          ? css.form__checkbox_label_expense\n                          : null\n                      }`}\n                    >\n                      Expense\n                    </span>\n                  </label>\n                </div>\n                <div className={css.form__flex_container}>\n                  <div className={css.form__input}>\n                    <label>\n                      <Field\n                        as=\"select\"\n                        name=\"category\"\n                        className={`${css.form__category} ${\n                          values.category !== ''\n                            ? css.form__category_active\n                            : null\n                        }`}\n                      >\n                        <option hidden value=\"\">\n                          Select a category\n                        </option>\n                        {userCategories\n                          .filter(category =>\n                            values.type === true\n                              ? category.type === 'Income'\n                              : category.type === 'Expense'\n                          )\n                          .map(category => (\n                            <option key={category._id} value={category._id}>\n                              {category.name}\n                            </option>\n                          ))}\n                      </Field>\n                      <ErrorMessage name=\"category\" component=\"div\" />\n                    </label>\n                  </div>\n                  <div className={css.form__input_flex}>\n                    <label>\n                      <Field\n                        type=\"number\"\n                        name=\"sum\"\n                        placeholder=\"0.00\"\n                        className={css.form__input}\n                      />\n                      <ErrorMessage name=\"sum\" component=\"div\" />\n                    </label>\n                    <label>\n                      <Datetime\n                        value={values.date}\n                        onChange={date => setFieldValue('date', date)}\n                        className={`${css.form__input} ${css.form__date}`}\n                        dateFormat=\"YYYY-MM-DD\"\n                        timeFormat={false}\n                      />\n                      <span className={css.form__date_icon}></span>\n                      <ErrorMessage name=\"date\" component=\"div\" />\n                    </label>\n                  </div>\n                  <div className={css.form__input}>\n                    <label>\n                      <Field\n                        as=\"input\"\n                        type=\"text\"\n                        name=\"comment\"\n                        placeholder=\"Comment\"\n                        className={css.form__input}\n                      />\n                    </label>\n                  </div>\n                </div>\n                <div className={css.form__btn_container}>\n                  <Button type=\"submit\" theme=\"color\" disabled={isSubmitting}>\n                    Add\n                  </Button>\n\n                  <Button\n                    type=\"button\"\n                    theme=\"white\"\n                    onClick={handleCloseAddTransactionModal}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </div>\n  ) : null;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalEditTransaction_modal__aESX1\",\"modal__close\":\"ModalEditTransaction_modal__close__OWdVa\",\"modal__title\":\"ModalEditTransaction_modal__title__Lmmva\",\"form__label\":\"ModalEditTransaction_form__label__ZJHe-\",\"form__checkbox_container\":\"ModalEditTransaction_form__checkbox_container__fl6ho\",\"form__checkbox_label\":\"ModalEditTransaction_form__checkbox_label__o8IC2\",\"form__checkbox_label_expense\":\"ModalEditTransaction_form__checkbox_label_expense__BFrlP\",\"form__checkbox_label_income\":\"ModalEditTransaction_form__checkbox_label_income__hOXJt\",\"form__checkbox_input\":\"ModalEditTransaction_form__checkbox_input__uiOCB\",\"form__checkbox_custom\":\"ModalEditTransaction_form__checkbox_custom__3KD4B\",\"form__slider\":\"ModalEditTransaction_form__slider__TPwSP\",\"form__input\":\"ModalEditTransaction_form__input__c6Cb5\",\"form__input_flex\":\"ModalEditTransaction_form__input_flex__Px3k1\",\"form__date\":\"ModalEditTransaction_form__date__-TvAf\",\"form__flex_container\":\"ModalEditTransaction_form__flex_container__T308u\",\"form__category\":\"ModalEditTransaction_form__category__MvXDV\",\"form__category_active\":\"ModalEditTransaction_form__category_active__GbP68\",\"form__btn_container\":\"ModalEditTransaction_form__btn_container__OXqrQ\",\"error_message\":\"ModalEditTransaction_error_message__kKrvE\",\"modal__overlay\":\"ModalEditTransaction_modal__overlay__7b9Pt\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Field, ErrorMessage, Form } from 'formik';\nimport * as Yup from 'yup';\nimport Datetime from 'react-datetime';\nimport { toast } from 'react-toastify';\nimport 'react-datetime/css/react-datetime.css';\n\nimport { Button } from 'components';\nimport { walletInstance } from 'utils/api';\nimport { setIsModalEditTransactionOpen } from 'redux/global/globalSlice';\nimport { selectIsModalEditTransactionOpen } from 'redux/global/selectors';\nimport { selectUserCategories } from 'redux/finance/selectors';\n\nimport sprite from '../../../images/icons.svg';\nimport css from './ModalEditTransaction.module.scss';\n\nexport const EditTransactionModal = ({\n  editedTransaction,\n  updateTransactionList,\n}) => {\n  const initialValues = {\n    type: editedTransaction ? editedTransaction.type === 'Income' : false,\n    sum: editedTransaction ? editedTransaction.sum : '',\n    category: editedTransaction ? editedTransaction.category : '',\n    date: editedTransaction ? new Date(editedTransaction.date) : new Date(),\n    comment: editedTransaction ? editedTransaction.comment : '',\n  };\n\n  const validationSchema = Yup.object().shape({\n    type: Yup.string(),\n    sum: Yup.number()\n      .typeError('Amount must be a number')\n      .required('Amount is required')\n      .positive('Amount must be a positive number'),\n    date: Yup.date().required('Date is required'),\n    category: Yup.string().required('Category is required'),\n    comment: Yup.string(),\n  });\n\n  const dispatch = useDispatch();\n  const isEditTransactionModalOpen = useSelector(\n    selectIsModalEditTransactionOpen\n  );\n  const userCategories = useSelector(selectUserCategories);\n\n  const handleCloseEditTransactionModal = () => {\n    dispatch(setIsModalEditTransactionOpen(false));\n  };\n\n  const handleSubmit = async (\n    values,\n    { setSubmitting, resetForm, setErrors }\n  ) => {\n    console.log('Aktualnie edytowana transakcja:', editedTransaction);\n    try {\n      const valuesToSend = {\n        sum: values.sum,\n        date: values.date.toISOString().split('T')[0],\n        type: values.type ? 'Income' : 'Expense',\n        category: values.category,\n        comment: values.comment,\n      };\n      console.log(\n        'Wysyłanie danych do API:',\n        `/transactions/${editedTransaction._id}`,\n        valuesToSend\n      );\n      const response = await walletInstance.patch(\n        `/transactions/${editedTransaction._id}`,\n        valuesToSend\n      );\n      console.log('Odpowiedź z serwera:', response.data);\n      if (response.status === 200) {\n        updateTransactionList(response.data);\n        handleCloseEditTransactionModal();\n\n        toast.success('Transaction updated successfully!');\n      } else {\n        toast.error('Error updating transaction. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setErrors({ submit: error.message });\n      toast.error('Error processing transaction. Please try again.');\n    } finally {\n      setSubmitting(false);\n      resetForm();\n    }\n  };\n\n  return isEditTransactionModalOpen ? (\n    <div className={css.modal__overlay}>\n      <div className={css.modal}>\n        <div>\n          <h5 className={css.modal__title}>Edit Transaction</h5>\n          <button\n            type=\"button\"\n            className={css.modal__close}\n            onClick={handleCloseEditTransactionModal}\n          >\n            <svg width=\"16px\" height=\"16px\">\n              <use href={`${sprite}#icon-close`}></use>\n            </svg>\n          </button>\n        </div>\n        <div>\n          <Formik\n            initialValues={initialValues}\n            onSubmit={handleSubmit}\n            validationSchema={validationSchema}\n          >\n            {({\n              isSubmitting,\n              handleSubmit,\n              setFieldValue,\n              values,\n              setValues,\n              setErrors,\n            }) => (\n              <Form onSubmit={handleSubmit}>\n                <div className={css.form__checkbox_container}>\n                  <label className={css.form__checkbox_label}>\n                    <span\n                      htmlFor=\"type\"\n                      className={`${css.form__checkbox_label} ${\n                        values.type === true\n                          ? css.form__checkbox_label_income\n                          : null\n                      }`}\n                    >\n                      Income\n                    </span>\n\n                    <Field\n                      type=\"checkbox\"\n                      name=\"type\"\n                      id=\"type\"\n                      onClick={() => {\n                        setValues({\n                          ...initialValues,\n                          type: values.type,\n                        });\n                        setErrors({});\n                      }}\n                      className={css.form__checkbox_input}\n                    />\n                    <div className={css.form__checkbox_custom}>\n                      <div className={css.form__slider}>\n                        {values.type === false ? '-' : '+'}\n                      </div>\n                    </div>\n\n                    <span\n                      htmlFor=\"type\"\n                      className={`${css.form__checkbox_label} ${\n                        values.type === false\n                          ? css.form__checkbox_label_expense\n                          : null\n                      }`}\n                    >\n                      Expense\n                    </span>\n                  </label>\n                </div>\n                <div className={css.form__flex_container}>\n                  <div className={css.form__input}>\n                    <label>\n                      <Field\n                        as=\"select\"\n                        name=\"category\"\n                        className={`${css.form__category} ${\n                          values.category !== ''\n                            ? css.form__category_active\n                            : null\n                        }`}\n                      >\n                        <option hidden value=\"\">\n                          Select a category\n                        </option>\n                        {userCategories\n                          .filter(category =>\n                            values.type === true\n                              ? category.type === 'Income'\n                              : category.type === 'Expense'\n                          )\n                          .map(category => (\n                            <option key={category._id} value={category._id}>\n                              {category.name}\n                            </option>\n                          ))}\n                      </Field>\n                      <ErrorMessage name=\"category\" component=\"div\" />\n                    </label>\n                  </div>\n                  <div className={css.form__input_flex}>\n                    <label>\n                      <Field\n                        type=\"number\"\n                        name=\"sum\"\n                        placeholder=\"0.00\"\n                        className={css.form__input}\n                      />\n                      <ErrorMessage name=\"sum\" component=\"div\" />\n                    </label>\n                    <label>\n                      <Datetime\n                        value={values.date}\n                        onChange={date => setFieldValue('date', date)}\n                        className={`${css.form__input} ${css.form__date}`}\n                        dateFormat=\"YYYY-MM-DD\"\n                        timeFormat={false}\n                      />\n                      <span className={css.form__date_icon}></span>\n                      <ErrorMessage name=\"date\" component=\"div\" />\n                    </label>\n                  </div>\n                  <div className={css.form__input}>\n                    <label>\n                      <Field\n                        as=\"input\"\n                        type=\"text\"\n                        name=\"comment\"\n                        placeholder=\"Comment\"\n                        className={css.form__input}\n                      />\n                    </label>\n                  </div>\n                </div>\n                <div className={css.form__btn_container}>\n                  <Button type=\"submit\" theme=\"color\" disabled={isSubmitting}>\n                    Edit\n                  </Button>\n\n                  <Button\n                    type=\"button\"\n                    theme=\"white\"\n                    onClick={handleCloseEditTransactionModal}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </div>\n  ) : null;\n};\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Transactions } from './Transactions/Transactions';\nimport {\n  addTransaction as addTransactionThunk,\n  getTransactions,\n  deleteTransaction,\n  updateTransaction,\n} from 'redux/finance/operations';\nimport { setIsModalEditTransactionOpen } from 'redux/global/globalSlice';\nimport { selectTransactions } from 'redux/finance/selectors';\nimport { AddTransactionModal } from './ModalAddTransaction/ModalAddTransaction';\nimport { EditTransactionModal } from './ModalEditTransaction/ModalEditTransaction';\n\nexport const TransactionsManager = () => {\n  const dispatch = useDispatch();\n  const transactions = useSelector(selectTransactions);\n  const [isTransactionAdded, setTransactionAdded] = useState(false);\n  const [editedTransaction, setEditedTransaction] = useState(null);\n\n  useEffect(() => {\n    dispatch(getTransactions());\n  }, [dispatch, isTransactionAdded]);\n\n  const handleAddTransaction = newTransactionData => {\n    dispatch(addTransactionThunk(newTransactionData))\n      .then(() => {\n        setTransactionAdded(prevState => !prevState);\n      })\n      .catch(error => {\n        console.error('Error while adding the transaction:', error);\n      });\n  };\n\n  const handleEdit = transaction => {\n    setEditedTransaction(transaction);\n    dispatch(setIsModalEditTransactionOpen(true));\n  };\n\n  const handleDelete = transactionId => {\n    dispatch(deleteTransaction(transactionId))\n      .then(() => {\n        dispatch(getTransactions());\n      })\n      .catch(error => {\n        console.error('Error while deleting the transaction:', error);\n      });\n  };\n\n  return (\n    <div>\n      <AddTransactionModal addTransaction={handleAddTransaction} />\n      <EditTransactionModal\n        editedTransaction={editedTransaction}\n        updateTransactionList={updateTransaction}\n      />\n      <Transactions\n        transactions={transactions}\n        onDelete={handleDelete}\n        onEdit={handleEdit}\n      />\n    </div>\n  );\n};\n\n// import React, { useState, useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { Transactions } from './Transactions/Transactions';\n// import { AddTransactionModal } from './ModalAddTransaction/ModalAddTransaction';\n// import { EditTransactionModal } from './ModalEditTransaction/ModalEditTransaction';\n// import { walletInstance } from 'utils/api';\n// import { selectIsModalEditTransactionOpen } from 'redux/global/selectors';\n// import { setIsModalEditTransactionOpen } from 'redux/global/globalSlice';\n\n// export const TransactionsManager = () => {\n//   const [transactions, setTransactions] = useState([]);\n//   const isEditModalOpen = useSelector(selectIsModalEditTransactionOpen);\n//   const dispatch = useDispatch();\n//   const [editedTransaction, setEditedTransaction] = useState(null);\n\n//   useEffect(() => {\n//     fetchTransactions();\n//   }, []);\n\n//   const fetchTransactions = async () => {\n//     try {\n//       const response = await walletInstance.get('/transactions');\n//       const fetchedTransactions = response.data.data.map(tr => ({\n//         _id: tr._id,\n//         date: tr.date ? new Date(tr.date).toLocaleDateString() : '',\n//         type: tr.type || '',\n//         category: tr.category ? tr.category.toString() : '',\n//         comment: tr.comment || '',\n//         sum: tr.sum ? tr.sum.toString() : '',\n//       }));\n//       setTransactions(fetchedTransactions);\n//     } catch (error) {\n//       console.error('Error fetching transactions', error);\n//     }\n//   };\n\n//   const addTransaction = newTransaction => {\n//     setTransactions(prevTransactions => [\n//       ...prevTransactions,\n//       {\n//         ...newTransaction,\n//         id: newTransaction._id,\n//       },\n//     ]);\n//     fetchTransactions();\n//   };\n\n//   const editTransaction = transaction => {\n//     setEditedTransaction({ ...transaction, _id: transaction._id }); // Dodaj '_id', jeśli nie istnieje\n//     dispatch(setIsModalEditTransactionOpen(true));\n//   };\n\n//   const updateTransactionList = updatedTransaction => {\n//     setTransactions(prevTransactions => {\n//       const newTransactions = prevTransactions.map(transaction =>\n//         transaction._id === updatedTransaction._id\n//           ? updatedTransaction\n//           : transaction\n//       );\n//       console.log('Zaktualizowane transakcje:', newTransactions);\n//       return newTransactions;\n//     });\n//   };\n\n//   const deleteTransaction = transaction => {\n//     setEditedTransaction({ ...transaction, _id: transaction.id });\n//   };\n\n//   return (\n//     <div>\n//       <AddTransactionModal addTransaction={addTransaction} />\n//       {isEditModalOpen && (\n//         <EditTransactionModal\n//           editedTransaction={editedTransaction}\n//           updateTransactionList={updateTransactionList}\n//         />\n//       )}\n//       <Transactions\n//         transactions={transactions}\n//         deleteTransaction={deleteTransaction}\n//         editTransaction={editTransaction}\n//       />\n//     </div>\n//   );\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"add_transaction_btn\":\"ButtonAddTransactions_add_transaction_btn__DAp3y\"};","import { useDispatch } from 'react-redux';\nimport css from './ButtonAddTransactions.module.scss';\nimport { setIsModalAddTransactionOpen } from 'redux/global/globalSlice';\n\nexport const ButtonAddTransactions = () => {\n  const dispatch = useDispatch();\n  const handleOpenAddTransactionModal = () => {\n    dispatch(setIsModalAddTransactionOpen(true));\n  };\n  return (\n    <button\n      onClick={handleOpenAddTransactionModal}\n      className={css.add_transaction_btn}\n    >\n      +\n    </button>\n  );\n};\n","import css from './Home.module.scss';\nimport { CurrencyTable } from 'components/CurrencyTable/CurrencyTable';\nimport { Balance } from 'components/Balance/Balance';\nimport Navigation from 'components/Navigation/Navigation';\nimport { TransactionsManager } from 'components/TransactionsManager/TransactionManager';\n//import React, { useState } from 'react';\nimport React from 'react';\nimport { ButtonAddTransactions } from 'components/ButtonAddTransactions/ButtonAddTransactions';\nimport { Helmet } from 'react-helmet';\nimport NavigationMobile from 'components/Navigation/NavigationMobile';\nimport { useMediaQuery } from 'react-responsive';\n\nconst Home = () => {\n  //const [isModalOpen, setIsModalOpen] = useState(false);\n  const isMobileView = useMediaQuery({ maxWidth: 767 });\n\n  return (\n    <div className={css.background}>\n      <Helmet>\n        <title>Home</title>\n      </Helmet>\n      <section>\n        <div className={css.wrapper}>\n          {isMobileView ? (\n            <div className={css.mainMobile}>\n              <NavigationMobile />\n              <Balance />\n              <TransactionsManager />\n            </div>\n          ) : (\n            <div className={css.mainTabletAndDesktop}>\n              <div className={css.sidebar}>\n                <div>\n                  {' '}\n                  <Navigation />\n                  <Balance />\n                </div>\n                <div>\n                  <CurrencyTable />\n                </div>\n              </div>\n              <div className={css.main}>\n                <TransactionsManager />\n              </div>\n            </div>\n          )}{' '}\n        </div>\n        <ButtonAddTransactions />\n      </section>\n    </div>\n  );\n};\n\nexport default Home;\n"],"names":["_ref","to","children","resolvedPath","useResolvedPath","linkClass","useMatch","path","pathname","end","css","_jsx","NavLink","className","Balance","dispatch","useDispatch","userDetails","useSelector","selectUserDetails","userBalance","balance","useEffect","getUserDetails","_jsxs","CurrencyTable","_useState","useState","_useState2","_slicedToArray","currencies","setCurrencies","fetchData","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","walletInstance","sent","data","t0","console","error","stop","apply","arguments","map","currency","code","bid","ask","_id","ActiveNavLink","width","height","href","concat","sprite","ModalConfirmDelete","onConfirm","handleClose","setIsModalConfirmDeleteOpen","selectIsModalConfirmDeleteOpen","type","onClick","Button","theme","Transactions","transactions","onDelete","onEdit","column","direction","sortOrder","setSortOrder","_useState3","_useState4","selectedTransactionId","setSelectedTransactionId","getAmountClass","handleSort","sortColumn","formatDate","dateString","date","Date","day","getDate","toString","padStart","month","getMonth","year","getFullYear","title","transaction","category","comment","sum","transactionId","AddTransactionModal","addTransaction","initialValues","validationSchema","Yup","shape","positive","required","isAddTransactionModalOpen","selectIsModalAddTransactionOpen","userCategories","selectUserCategories","handleCloseAddTransactionModal","setIsModalAddTransactionOpen","handleSubmit","_ref3","values","_ref2","setSubmitting","resetForm","valuesToSend","toISOString","log","status","toast","finish","_x","_x2","Formik","onSubmit","_ref4","isSubmitting","setFieldValue","setValues","setErrors","Form","htmlFor","Field","name","id","_objectSpread","as","hidden","value","filter","ErrorMessage","component","placeholder","Datetime","onChange","dateFormat","timeFormat","disabled","EditTransactionModal","editedTransaction","updateTransactionList","typeError","isEditTransactionModalOpen","selectIsModalEditTransactionOpen","handleCloseEditTransactionModal","setIsModalEditTransactionOpen","split","submit","message","TransactionsManager","selectTransactions","isTransactionAdded","setTransactionAdded","setEditedTransaction","getTransactions","newTransactionData","addTransactionThunk","then","prevState","catch","updateTransaction","deleteTransaction","ButtonAddTransactions","isMobileView","useMediaQuery","maxWidth","Helmet","NavigationMobile","Navigation"],"sourceRoot":""}