{"version":3,"file":"static/js/839.df445431.chunk.js","mappings":"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","sources":["webpack://wallet-application/./src/components/Balance/Balance.module.scss?bde2","components/Balance/Balance.jsx","webpack://wallet-application/./src/components/CurrencyTable/CurrencyTable.module.scss?daa9","components/CurrencyTable/CurrencyTable.jsx","webpack://wallet-application/./src/components/ActiveNavLink/ActiveNavLink.module.scss?c0df","components/ActiveNavLink/ActiveNavLink.jsx","webpack://wallet-application/./src/components/Navigation/Navigation.module.scss?a7be","components/Navigation/Navigation.jsx","webpack://wallet-application/./src/pages/Home/Home.module.scss?ce6f","webpack://wallet-application/./src/components/TransactionsManager/Transactions/Transactions.module.scss?167d","components/TransactionsManager/Transactions/Transactions.jsx","webpack://wallet-application/./src/components/TransactionsManager/ModalAddTransaction/ModalAddTransaction.module.scss?a3a7","components/TransactionsManager/ModalAddTransaction/ModalAddTransaction.jsx","webpack://wallet-application/./src/components/TransactionsManager/ModalEditTransaction/ModalEditTransaction.module.scss?51da","components/TransactionsManager/ModalEditTransaction/ModalEditTransaction.jsx","components/TransactionsManager/TransactionManager.jsx","webpack://wallet-application/./src/components/ButtonAddTransactions/ButtonAddTransactions.module.scss?2b0c","components/ButtonAddTransactions/ButtonAddTransactions.jsx","pages/Home/Home.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"balance\":\"Balance_balance__tUx3D\",\"title\":\"Balance_title__aUwwk\",\"amount\":\"Balance_amount__t4xet\"};","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport css from './Balance.module.scss';\nimport { selectUserDetails } from 'redux/session/selectors';\nimport { getUserDetails } from 'redux/session/operations';\n\nexport const Balance = () => {\n  const dispatch = useDispatch();\n  const userDetails = useSelector(selectUserDetails);\n  const userBalance = userDetails ? userDetails.balance : 0;\n\n  useEffect(() => {\n    dispatch(getUserDetails());\n  }, [dispatch]);\n\n  return (\n    <div className={css.balance}>\n      <p className={css.title}>YOUR BALANCE</p>\n      <p className={css.amount}>PLN {userBalance}</p>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"tableBg\":\"CurrencyTable_tableBg__nplZ5\",\"currencyTable\":\"CurrencyTable_currencyTable__1iH+4\"};","import React, { useState, useEffect } from 'react';\nimport css from './CurrencyTable.module.scss';\n\nimport { walletInstance } from 'utils/api';\n\nexport const CurrencyTable = () => {\n  const [currencies, setCurrencies] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await walletInstance.get('/currencies');\n\n        setCurrencies(response.data.data.currencies);\n      } catch (error) {\n        console.error('Error fetching currencies', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div className={css.tableBg}>\n      <table className={css.currencyTable}>\n        <thead className={css.currencyTableHead}>\n          <tr>\n            <th>Currency</th>\n            <th>Purchase</th>\n            <th>Sell</th>\n          </tr>\n        </thead>\n        <tbody className={css.currencyTableBody}>\n          {currencies.map(currency => (\n            <tr key={currency._id}>\n              <td>{currency.code}</td>\n              <td>{currency.bid}</td>\n              <td>{currency.ask}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"link\":\"ActiveNavLink_link__Srke3\",\"active\":\"ActiveNavLink_active__uzCgI\"};","import React from 'react';\nimport { NavLink, useMatch, useResolvedPath } from 'react-router-dom';\nimport css from './ActiveNavLink.module.scss';\n\nconst ActiveNavLink = ({ to, children }) => {\n  const resolvedPath = useResolvedPath(to);\n  const isActive = useMatch({ path: resolvedPath.pathname, end: true });\n\n  const linkClass = isActive ? css.active : css.link;\n\n  return (\n    <NavLink to={to} className={linkClass}>\n      {children}\n    </NavLink>\n  );\n};\n\nexport default ActiveNavLink;\n","// extracted by mini-css-extract-plugin\nexport default {\"icon\":\"Navigation_icon__lPT0N\"};","import React from 'react';\nimport ActiveNavLink from '../ActiveNavLink/ActiveNavLink';\nimport css from './Navigation.module.scss';\nimport sprite from 'images/icons.svg';\n\nconst Navigation = () => {\n  return (\n    <nav>\n      <ul className={css.navigation}>\n        <li>\n          <ActiveNavLink to=\"/home\">\n            <svg className={css.icon} width=\"38px\" height=\"38px\">\n              <use href={`${sprite}#icon-home3`}></use>\n            </svg>\n            Home\n          </ActiveNavLink>\n        </li>\n        <li>\n          <ActiveNavLink to=\"/statistics\">\n            <svg className={css.icon} width=\"38px\" height=\"38px\">\n              <use href={`${sprite}#icon-baseline-timeline`}></use>\n            </svg>\n            Statistics\n          </ActiveNavLink>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"Home_background__w4mTu\",\"dashboard_container\":\"Home_dashboard_container__E9ETc\",\"container\":\"Home_container__qRlyu\",\"sidebar\":\"Home_sidebar__74EFX\",\"main\":\"Home_main__4+rG5\"};","// extracted by mini-css-extract-plugin\nexport default {\"tableBg\":\"Transactions_tableBg__zIQxE\",\"transactionsTable\":\"Transactions_transactionsTable__83vc7\",\"transactionsTableHead\":\"Transactions_transactionsTableHead__8+gku\",\"transactionsTablebody\":\"Transactions_transactionsTablebody__5CQS8\",\"thName\":\"Transactions_thName__3q6MS\",\"iconSort\":\"Transactions_iconSort__6FlXB\",\"sumSection\":\"Transactions_sumSection__rkTQ1\",\"iconTransactions\":\"Transactions_iconTransactions__lZpcx\",\"amountPlus\":\"Transactions_amountPlus__gFaHt\",\"amountMinus\":\"Transactions_amountMinus__4FyfO\"};","import React from 'react';\nimport css from './Transactions.module.scss';\nimport { useState } from 'react';\nimport sprite from 'images/icons.svg';\n\nexport const Transactions = ({ transactions, onDelete, onEdit }) => {\n  const [sortOrder, setSortOrder] = useState({\n    column: null,\n    direction: 'asc',\n  });\n\n  const getAmountClass = type => {\n    return type === 'Income'\n      ? css.amountPlus\n      : type === 'Expense'\n      ? css.amountMinus\n      : '';\n  };\n\n  const handleSort = sortColumn => {\n    const direction =\n      sortColumn === sortOrder.column && sortOrder.direction === 'asc'\n        ? 'desc'\n        : 'asc';\n    setSortOrder({ column: sortColumn, direction });\n  };\n\n  const handleDelete = transactionId => {\n    onDelete(transactionId);\n  };\n\n  const formatDate = dateString => {\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n\n  return (\n    <div className={css.tableBg}>\n      <table className={css.transactionsTable}>\n        <thead className={css.transactionsTableHead}>\n          <tr>\n            <th onClick={() => handleSort(0)} title=\"Sort\">\n              <div className={css.thName}>\n                <span>Date</span>\n                <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n                  <use href={`${sprite}#icon-sort`}></use>\n                </svg>\n              </div>\n            </th>\n            <th onClick={() => handleSort(1)} title=\"Sort\">\n              <div className={css.thName}>\n                <span>Type</span>\n                <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n                  <use href={`${sprite}#icon-sort`}></use>\n                </svg>\n              </div>\n            </th>\n            <th onClick={() => handleSort(2)} title=\"Sort\">\n              <div className={css.thName}>\n                <span>Category</span>\n                <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n                  <use href={`${sprite}#icon-sort`}></use>\n                </svg>\n              </div>\n            </th>\n            <th onClick={() => handleSort(3)} title=\"Sort\">\n              <div className={css.thName}>\n                <span>Comment</span>\n                <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n                  <use href={`${sprite}#icon-sort`}></use>\n                </svg>\n              </div>\n            </th>\n            <th onClick={() => handleSort(4)} title=\"Sort\">\n              <div className={css.thName}>\n                <span>Amount</span>\n                <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n                  <use href={`${sprite}#icon-sort`}></use>\n                </svg>\n              </div>\n            </th>\n            <th>Options</th>\n          </tr>\n        </thead>\n        <tbody>\n          {transactions.map(transaction => (\n            <tr key={transaction._id}>\n              <td>{formatDate(transaction.date)}</td>\n              <td>{transaction.type}</td>\n              <td>{transaction.category}</td>\n              <td>{transaction.comment}</td>\n              <td className={getAmountClass(transaction.type)}>\n                {transaction.sum}\n              </td>\n              <td>\n                <svg\n                  className={css.iconTransactions}\n                  width=\"20px\"\n                  height=\"20px\"\n                  onClick={() => onEdit(transaction)}\n                >\n                  <use href={`${sprite}#icon-pencil2`}></use>\n                </svg>\n                <svg\n                  className={css.iconTransactions}\n                  width=\"20px\"\n                  height=\"20px\"\n                  onClick={() => handleDelete(transaction._id)}\n                >\n                  <use href={`${sprite}#icon-bin`}></use>\n                </svg>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import css from './Transactions.module.scss';\n// import sprite from 'images/icons.svg';\n// import { getUserDetails } from 'redux/session/operations';\n// import { selectUserDetails } from 'redux/session/selectors';\n\n// import { walletInstance } from 'utils/api';\n\n// export const Transactions = ({\n//   transactions,\n//   deleteTransaction,\n//   editTransaction,\n// }) => {\n// const [, setSums] = useState({ sumPlus: 0, sumMinus: 0, balance: 0 });\n// const [sortOrder, setSortOrder] = useState({\n//   column: null,\n//   direction: 'asc',\n// });\n// const dispatch = useDispatch();\n// const userDetails = useSelector(selectUserDetails);\n// const userBalance = userDetails ? userDetails.balance : 0;\n\n// useEffect(() => {\n//   dispatch(getUserDetails());\n// }, [dispatch, transactions, deleteTransaction]);\n\n// const calculateSums = useCallback(() => {\n//   let sumPlus = 0;\n//   let sumMinus = 0;\n\n//   transactions.forEach(transaction => {\n//     const amount = parseFloat(transaction.sum);\n//     if (transaction.type === 'Income') {\n//       sumPlus += amount;\n//     } else if (transaction.type === 'Expense') {\n//       sumMinus += amount;\n//     }\n//   });\n\n//   return { sumPlus, sumMinus, balance: sumPlus - sumMinus };\n// }, [transactions]);\n\n// useEffect(() => {\n//   const { sumPlus, sumMinus, balance } = calculateSums();\n//   setSums({ sumPlus, sumMinus, balance });\n// }, [transactions, calculateSums]);\n\n// const getAmountClass = type => {\n//   return type === 'Income'\n//     ? css.amountPlus\n//     : type === 'Expense'\n//     ? css.amountMinus\n//     : '';\n// };\n\n// const handleSort = sortColumn => {\n//   const direction =\n//     sortColumn === sortOrder.column && sortOrder.direction === 'asc'\n//       ? 'desc'\n//       : 'asc';\n//   setSortOrder({ column: sortColumn, direction });\n// };\n\n// const sortedTransactions = [...transactions].sort((a, b) => {\n//   let valueA, valueB;\n//   if (sortOrder.column === 4) {\n//     valueA = parseFloat(a.sum);\n//     valueB = parseFloat(b.sum);\n//   } else if (sortOrder.column === 0) {\n//     valueA = new Date(a.date);\n//     valueB = new Date(b.date);\n//   } else {\n//     valueA = a[sortOrder.column];\n//     valueB = b[sortOrder.column];\n//   }\n\n//   return sortOrder.direction === 'asc'\n//     ? valueA > valueB\n//       ? 1\n//       : -1\n//     : valueA < valueB\n//     ? 1\n//     : -1;\n// });\n\n// const { sumPlus, sumMinus } = calculateSums();\n\n//   const handleEdit = transactionId => {\n//     const transactionToEdit = transactions.find(t => t._id === transactionId);\n//     if (transactionToEdit) {\n//       editTransaction(transactionToEdit);\n//     }\n//   };\n\n//   const handleDelete = async transactionId => {\n//     try {\n//       const response = await walletInstance.delete(\n//         `/transactions/${transactionId}`\n//       );\n//       if (response.status === 200) {\n//         deleteTransaction(transactionId);\n//       } else {\n//         console.error('Error deleting transaction');\n//       }\n//     } catch (error) {\n//       console.error('Error deleting transaction', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div className={css.tableBg}>\n//         <table className={css.transactionsTable}>\n//           <thead className={css.transactionsTableHead}>\n//             <tr>\n//               <th onClick={() => handleSort(0)} title=\"Sort\">\n//                 <div className={css.thName}>\n//                   <span>Date</span>\n// //                   <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n// //                     <use href={`${sprite}#icon-sort`}></use>\n// //                   </svg>\n// //                 </div>\n// //               </th>\n//               <th onClick={() => handleSort(1)} title=\"Sort\">\n//                 <div className={css.thName}>\n//                   <span>Type</span>\n//                   <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n//                     <use href={`${sprite}#icon-sort`}></use>\n//                   </svg>\n//                 </div>\n//               </th>\n//               <th onClick={() => handleSort(2)} title=\"Sort\">\n//                 <div className={css.thName}>\n//                   <span>Category</span>\n//                   <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n//                     <use href={`${sprite}#icon-sort`}></use>\n//                   </svg>\n//                 </div>\n//               </th>\n//               <th onClick={() => handleSort(3)} title=\"Sort\">\n//                 <div className={css.thName}>\n//                   <span>Comment</span>\n//                   <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n//                     <use href={`${sprite}#icon-sort`}></use>\n//                   </svg>\n//                 </div>\n//               </th>\n//               <th onClick={() => handleSort(4)} title=\"Sort\">\n//                 <div className={css.thName}>\n//                   <span>Amount</span>\n//                   <svg className={css.iconSort} width=\"20px\" height=\"20px\">\n//                     <use href={`${sprite}#icon-sort`}></use>\n//                   </svg>\n//                 </div>\n//               </th>\n//               <th>Options</th>\n//             </tr>\n//           </thead>\n//           <tbody className={css.transactionsTableBody}>\n//             {sortedTransactions.map(transaction => (\n//               <tr key={transaction._id}>\n//                 <td>{transaction.date}</td>\n//                 <td>{transaction.type}</td>\n//                 <td>{transaction.category}</td>\n//                 <td>{transaction.comment}</td>\n//                 <td className={getAmountClass(transaction.type)}>\n//                   {transaction.sum}\n//                 </td>\n//                 <td>\n// <svg\n//   className={css.iconTransactions}\n//   width=\"20px\"\n//   height=\"20px\"\n//   onClick={() => handleEdit(transaction._id)}\n// >\n//   <use href={`${sprite}#icon-pencil2`}></use>\n// </svg>\n// <svg\n//   className={css.iconTransactions}\n//   width=\"20px\"\n//   height=\"20px\"\n//   onClick={() => handleDelete(transaction.id)}\n// >\n//   <use href={`${sprite}#icon-bin`}></use>\n// </svg>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//       <div className={css.sumSection}>\n//         <p>Incomes: {sumPlus.toFixed(2)}</p>\n//         <p>Expenses: {sumMinus.toFixed(2)}</p>\n//         <p>Balance: {userBalance}</p>\n//       </div>\n//     </div>\n//   );\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalAddTransaction_modal__92Wan\",\"modal__close\":\"ModalAddTransaction_modal__close__2oFKS\",\"modal__title\":\"ModalAddTransaction_modal__title__lkrl8\",\"form__label\":\"ModalAddTransaction_form__label__pL9sF\",\"form__checkbox_container\":\"ModalAddTransaction_form__checkbox_container__Ewtgx\",\"form__checkbox_label\":\"ModalAddTransaction_form__checkbox_label__fP5ud\",\"form__checkbox_label_expense\":\"ModalAddTransaction_form__checkbox_label_expense__Pkkrh\",\"form__checkbox_label_income\":\"ModalAddTransaction_form__checkbox_label_income__1jimB\",\"form__checkbox_input\":\"ModalAddTransaction_form__checkbox_input__mqlbb\",\"form__checkbox_custom\":\"ModalAddTransaction_form__checkbox_custom__TZ4ho\",\"form__slider\":\"ModalAddTransaction_form__slider__UGKmj\",\"form__input\":\"ModalAddTransaction_form__input__mcnWJ\",\"form__input_flex\":\"ModalAddTransaction_form__input_flex__JnydG\",\"form__date\":\"ModalAddTransaction_form__date__7R5ye\",\"form__flex_container\":\"ModalAddTransaction_form__flex_container__agrkZ\",\"form__category\":\"ModalAddTransaction_form__category__9vIwc\",\"form__category_active\":\"ModalAddTransaction_form__category_active__eIpA1\",\"form__btn_container\":\"ModalAddTransaction_form__btn_container__Lecm6\",\"error_message\":\"ModalAddTransaction_error_message__J5jVO\",\"modal__overlay\":\"ModalAddTransaction_modal__overlay__5muZL\"};","import * as Yup from 'yup';\n\nimport Datetime from 'react-datetime';\nimport { toast } from 'react-toastify';\nimport React, { useState, useEffect } from 'react';\nimport 'react-datetime/css/react-datetime.css';\nimport { Formik, Field, ErrorMessage, Form } from 'formik';\nimport { walletInstance } from 'utils/api';\n\nimport { Button } from 'components';\nimport css from './ModalAddTransaction.module.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setIsModalAddTransactionOpen } from 'redux/global/globalSlice';\nimport { selectIsModalAddTransactionOpen } from 'redux/global/selectors';\nimport sprite from '../../../images/icons.svg';\n\nexport const AddTransactionModal = ({ addTransaction }) => {\n  const initialValues = {\n    type: false,\n    sum: '',\n    category: '',\n    date: new Date(),\n    comment: '',\n  };\n\n  const validationSchema = Yup.object().shape({\n    type: Yup.string(),\n    sum: Yup.number()\n      .positive('Sum must be a positive number')\n      .required('Sum is required'),\n    category: Yup.string().required('Category is required'),\n    date: Yup.date().required('Date is required'),\n    comment: Yup.string(),\n  });\n\n  const [categories, setCategories] = useState([]);\n\n  const dispatch = useDispatch();\n  const isAddTransactionModalOpen = useSelector(\n    selectIsModalAddTransactionOpen\n  );\n\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const response = await walletInstance.get('/categories');\n\n        const fetchedCategories = response.data.data;\n        setCategories(fetchedCategories);\n      } catch (error) {\n        console.error('Error fetching categories', error);\n      }\n    };\n    fetchCategories();\n  }, []);\n\n  const handleCloseAddTransactionModal = () => {\n    dispatch(setIsModalAddTransactionOpen(false));\n  };\n\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n    setSubmitting(true);\n    try {\n      const valuesToSend = {\n        sum: values.sum,\n        date: values.date.toISOString(),\n        type: values.type ? 'Income' : 'Expense',\n        category: values.category,\n        comment: values.comment,\n      };\n      console.log(valuesToSend.date);\n      const response = await walletInstance.post('/transactions', valuesToSend);\n      if (response.status === 201) {\n        console.log('Transaction added successfully!', response.data);\n        addTransaction(response.data);\n        toast.success('Transaction added successfully!');\n      } else {\n        toast.error('Error adding transaction. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error adding transaction:', error);\n      toast.error('Error adding transaction. Please try again.');\n    } finally {\n      setSubmitting(false);\n      resetForm();\n      handleCloseAddTransactionModal();\n    }\n  };\n\n  return isAddTransactionModalOpen ? (\n    <div className={css.modal__overlay}>\n      <div className={css.modal}>\n        <div>\n          <h5 className={css.modal__title}>Add Transaction</h5>\n          <button\n            type=\"button\"\n            className={css.modal__close}\n            onClick={handleCloseAddTransactionModal}\n          >\n            <svg width=\"16px\" height=\"16px\">\n              <use href={`${sprite}#icon-close`}></use>\n            </svg>\n          </button>\n        </div>\n        <div>\n          <Formik\n            initialValues={initialValues}\n            onSubmit={handleSubmit}\n            validationSchema={validationSchema}\n          >\n            {({\n              isSubmitting,\n              handleSubmit,\n              setFieldValue,\n              values,\n              setValues,\n              setErrors,\n            }) => (\n              <Form onSubmit={handleSubmit}>\n                <div className={css.form__checkbox_container}>\n                  <label className={css.form__checkbox_label}>\n                    <span\n                      htmlFor=\"type\"\n                      className={`${css.form__checkbox_label} ${\n                        values.type === true\n                          ? css.form__checkbox_label_income\n                          : null\n                      }`}\n                    >\n                      Income\n                    </span>\n\n                    <Field\n                      type=\"checkbox\"\n                      name=\"type\"\n                      id=\"type\"\n                      onClick={() => {\n                        setValues({\n                          ...initialValues,\n                          type: values.type,\n                        });\n                        setErrors({});\n                      }}\n                      className={css.form__checkbox_input}\n                    />\n                    <div className={css.form__checkbox_custom}>\n                      <div className={css.form__slider}>\n                        {values.type === false ? '-' : '+'}\n                      </div>\n                    </div>\n\n                    <span\n                      htmlFor=\"type\"\n                      className={`${css.form__checkbox_label} ${\n                        values.type === false\n                          ? css.form__checkbox_label_expense\n                          : null\n                      }`}\n                    >\n                      Expense\n                    </span>\n                  </label>\n                </div>\n                <div className={css.form__flex_container}>\n                  <div className={css.form__input}>\n                    <label>\n                      <Field\n                        as=\"select\"\n                        name=\"category\"\n                        className={`${css.form__category} ${\n                          values.category !== ''\n                            ? css.form__category_active\n                            : null\n                        }`}\n                      >\n                        <option hidden value=\"\">\n                          Select a category\n                        </option>\n                        {categories\n                          .filter(category =>\n                            values.type === true\n                              ? category.type === 'income'\n                              : category.type === 'expense'\n                          )\n                          .map(category => (\n                            <option key={category._id} value={category._id}>\n                              {category.name}\n                            </option>\n                          ))}\n                      </Field>\n                      <ErrorMessage name=\"category\" component=\"div\" />\n                    </label>\n                  </div>\n                  <div className={css.form__input_flex}>\n                    <label>\n                      <Field\n                        type=\"number\"\n                        name=\"sum\"\n                        placeholder=\"0.00\"\n                        className={css.form__input}\n                      />\n                      <ErrorMessage name=\"sum\" component=\"div\" />\n                    </label>\n                    <label>\n                      <Datetime\n                        value={values.date}\n                        onChange={date => setFieldValue('date', date)}\n                        className={`${css.form__input} ${css.form__date}`}\n                        dateFormat=\"YYYY-MM-DD\"\n                        timeFormat={false}\n                      />\n                      <span className={css.form__date_icon}></span>\n                      <ErrorMessage name=\"date\" component=\"div\" />\n                    </label>\n                  </div>\n                  <div className={css.form__input}>\n                    <label>\n                      <Field\n                        as=\"input\"\n                        type=\"text\"\n                        name=\"comment\"\n                        placeholder=\"Comment\"\n                        className={css.form__input}\n                      />\n                    </label>\n                  </div>\n                </div>\n                <div className={css.form__btn_container}>\n                  <Button type=\"submit\" theme=\"color\" disabled={isSubmitting}>\n                    Add\n                  </Button>\n\n                  <Button\n                    type=\"button\"\n                    theme=\"white\"\n                    onClick={handleCloseAddTransactionModal}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </div>\n  ) : null;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ModalEditTransaction_modal__aESX1\",\"modal__close\":\"ModalEditTransaction_modal__close__OWdVa\",\"modal__title\":\"ModalEditTransaction_modal__title__Lmmva\",\"form__label\":\"ModalEditTransaction_form__label__ZJHe-\",\"form__checkbox_container\":\"ModalEditTransaction_form__checkbox_container__fl6ho\",\"form__checkbox_label\":\"ModalEditTransaction_form__checkbox_label__o8IC2\",\"form__checkbox_label_expense\":\"ModalEditTransaction_form__checkbox_label_expense__BFrlP\",\"form__checkbox_label_income\":\"ModalEditTransaction_form__checkbox_label_income__hOXJt\",\"form__checkbox_input\":\"ModalEditTransaction_form__checkbox_input__uiOCB\",\"form__checkbox_custom\":\"ModalEditTransaction_form__checkbox_custom__3KD4B\",\"form__slider\":\"ModalEditTransaction_form__slider__TPwSP\",\"form__input\":\"ModalEditTransaction_form__input__c6Cb5\",\"form__input_flex\":\"ModalEditTransaction_form__input_flex__Px3k1\",\"form__date\":\"ModalEditTransaction_form__date__-TvAf\",\"form__flex_container\":\"ModalEditTransaction_form__flex_container__T308u\",\"form__category\":\"ModalEditTransaction_form__category__MvXDV\",\"form__category_active\":\"ModalEditTransaction_form__category_active__GbP68\",\"form__btn_container\":\"ModalEditTransaction_form__btn_container__OXqrQ\",\"error_message\":\"ModalEditTransaction_error_message__kKrvE\",\"modal__overlay\":\"ModalEditTransaction_modal__overlay__7b9Pt\"};","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Field, ErrorMessage, Form } from 'formik';\nimport * as Yup from 'yup';\nimport Datetime from 'react-datetime';\nimport { toast } from 'react-toastify';\nimport 'react-datetime/css/react-datetime.css';\n\nimport { Button } from 'components';\nimport { walletInstance } from 'utils/api';\nimport { setIsModalEditTransactionOpen } from 'redux/global/globalSlice';\nimport { selectIsModalEditTransactionOpen } from 'redux/global/selectors';\nimport sprite from '../../../images/icons.svg';\nimport css from './ModalEditTransaction.module.scss';\n\nexport const EditTransactionModal = ({\n  editedTransaction,\n  updateTransactionList,\n}) => {\n  const [categories, setCategories] = useState([]);\n\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const response = await walletInstance.get('/categories');\n        const fetchedCategories = response.data.data;\n        setCategories(fetchedCategories);\n      } catch (error) {\n        console.error('Error fetching categories', error);\n      }\n    };\n    fetchCategories();\n  }, []);\n\n  const initialValues = {\n    type: editedTransaction ? editedTransaction.type === 'Income' : false,\n    sum: editedTransaction ? editedTransaction.sum : '',\n    category: editedTransaction ? editedTransaction.category : '',\n    date: editedTransaction ? new Date(editedTransaction.date) : new Date(),\n    comment: editedTransaction ? editedTransaction.comment : '',\n  };\n\n  const validationSchema = Yup.object().shape({\n    type: Yup.string(),\n    sum: Yup.number()\n      .typeError('Amount must be a number')\n      .required('Amount is required')\n      .positive('Amount must be a positive number'),\n    date: Yup.date().required('Date is required'),\n    category: Yup.string().required('Category is required'),\n    comment: Yup.string(),\n  });\n\n  const dispatch = useDispatch();\n  const isEditTransactionModalOpen = useSelector(\n    selectIsModalEditTransactionOpen\n  );\n\n  const handleCloseEditTransactionModal = () => {\n    dispatch(setIsModalEditTransactionOpen(false));\n  };\n\n  const handleSubmit = async (\n    values,\n    { setSubmitting, resetForm, setErrors }\n  ) => {\n    console.log('Aktualnie edytowana transakcja:', editedTransaction);\n    try {\n      const valuesToSend = {\n        sum: values.sum,\n        date: values.date.toISOString().split('T')[0],\n        type: values.type ? 'Income' : 'Expense',\n        category: values.category,\n        comment: values.comment,\n      };\n      console.log(\n        'Wysyłanie danych do API:',\n        `/transactions/${editedTransaction._id}`,\n        valuesToSend\n      );\n      const response = await walletInstance.patch(\n        `/transactions/${editedTransaction._id}`,\n        valuesToSend\n      );\n      console.log('Odpowiedź z serwera:', response.data);\n      if (response.status === 200) {\n        updateTransactionList(response.data);\n        handleCloseEditTransactionModal();\n\n        toast.success('Transaction updated successfully!');\n      } else {\n        toast.error('Error updating transaction. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setErrors({ submit: error.message });\n      toast.error('Error processing transaction. Please try again.');\n    } finally {\n      setSubmitting(false);\n      resetForm();\n    }\n  };\n\n  return isEditTransactionModalOpen ? (\n    <div className={css.modal__overlay}>\n      <div className={css.modal}>\n        <div>\n          <h5 className={css.modal__title}>Edit Transaction</h5>\n          <button\n            type=\"button\"\n            className={css.modal__close}\n            onClick={handleCloseEditTransactionModal}\n          >\n            <svg width=\"16px\" height=\"16px\">\n              <use href={`${sprite}#icon-close`}></use>\n            </svg>\n          </button>\n        </div>\n        <div>\n          <Formik\n            initialValues={initialValues}\n            onSubmit={handleSubmit}\n            validationSchema={validationSchema}\n          >\n            {({\n              isSubmitting,\n              handleSubmit,\n              setFieldValue,\n              values,\n              setValues,\n              setErrors,\n            }) => (\n              <Form onSubmit={handleSubmit}>\n                <div className={css.form__checkbox_container}>\n                  <label className={css.form__checkbox_label}>\n                    <span\n                      htmlFor=\"type\"\n                      className={`${css.form__checkbox_label} ${\n                        values.type === true\n                          ? css.form__checkbox_label_income\n                          : null\n                      }`}\n                    >\n                      Income\n                    </span>\n\n                    <Field\n                      type=\"checkbox\"\n                      name=\"type\"\n                      id=\"type\"\n                      onClick={() => {\n                        setValues({\n                          ...initialValues,\n                          type: values.type,\n                        });\n                        setErrors({});\n                      }}\n                      className={css.form__checkbox_input}\n                    />\n                    <div className={css.form__checkbox_custom}>\n                      <div className={css.form__slider}>\n                        {values.type === false ? '-' : '+'}\n                      </div>\n                    </div>\n\n                    <span\n                      htmlFor=\"type\"\n                      className={`${css.form__checkbox_label} ${\n                        values.type === false\n                          ? css.form__checkbox_label_expense\n                          : null\n                      }`}\n                    >\n                      Expense\n                    </span>\n                  </label>\n                </div>\n                <div className={css.form__flex_container}>\n                  <div className={css.form__input}>\n                    <label>\n                      <Field\n                        as=\"select\"\n                        name=\"category\"\n                        className={`${css.form__category} ${\n                          values.category !== ''\n                            ? css.form__category_active\n                            : null\n                        }`}\n                      >\n                        <option hidden value=\"\">\n                          Select a category\n                        </option>\n                        {categories\n                          .filter(category =>\n                            values.type === true\n                              ? category.type === 'income'\n                              : category.type === 'expense'\n                          )\n                          .map(category => (\n                            <option key={category._id} value={category._id}>\n                              {category.name}\n                            </option>\n                          ))}\n                      </Field>\n                      <ErrorMessage name=\"category\" component=\"div\" />\n                    </label>\n                  </div>\n                  <div className={css.form__input_flex}>\n                    <label>\n                      <Field\n                        type=\"number\"\n                        name=\"sum\"\n                        placeholder=\"0.00\"\n                        className={css.form__input}\n                      />\n                      <ErrorMessage name=\"sum\" component=\"div\" />\n                    </label>\n                    <label>\n                      <Datetime\n                        value={values.date}\n                        onChange={date => setFieldValue('date', date)}\n                        className={`${css.form__input} ${css.form__date}`}\n                        dateFormat=\"YYYY-MM-DD\"\n                        timeFormat={false}\n                      />\n                      <span className={css.form__date_icon}></span>\n                      <ErrorMessage name=\"date\" component=\"div\" />\n                    </label>\n                  </div>\n                  <div className={css.form__input}>\n                    <label>\n                      <Field\n                        as=\"input\"\n                        type=\"text\"\n                        name=\"comment\"\n                        placeholder=\"Comment\"\n                        className={css.form__input}\n                      />\n                    </label>\n                  </div>\n                </div>\n                <div className={css.form__btn_container}>\n                  <Button type=\"submit\" theme=\"color\" disabled={isSubmitting}>\n                    Edit\n                  </Button>\n\n                  <Button\n                    type=\"button\"\n                    theme=\"white\"\n                    onClick={handleCloseEditTransactionModal}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </div>\n  ) : null;\n};\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Transactions } from './Transactions/Transactions';\nimport {\n  addTransaction as addTransactionThunk,\n  getTransactions,\n  deleteTransaction,\n  updateTransaction,\n} from 'redux/finance/operations';\nimport { setIsModalEditTransactionOpen } from 'redux/global/globalSlice';\nimport { selectTransactions } from 'redux/finance/selectors';\nimport { AddTransactionModal } from './ModalAddTransaction/ModalAddTransaction';\nimport { EditTransactionModal } from './ModalEditTransaction/ModalEditTransaction';\n\nexport const TransactionsManager = () => {\n  const dispatch = useDispatch();\n  const transactions = useSelector(selectTransactions);\n  const [isTransactionAdded, setTransactionAdded] = useState(false);\n  const [editedTransaction, setEditedTransaction] = useState(null);\n\n  useEffect(() => {\n    dispatch(getTransactions());\n  }, [dispatch, isTransactionAdded]);\n\n  const handleAddTransaction = newTransactionData => {\n    dispatch(addTransactionThunk(newTransactionData))\n      .then(() => {\n        setTransactionAdded(prevState => !prevState);\n      })\n      .catch(error => {\n        console.error('Error while adding the transaction:', error);\n      });\n  };\n\n  const handleEdit = transaction => {\n    setEditedTransaction(transaction);\n    dispatch(setIsModalEditTransactionOpen(true));\n  };\n\n  const handleDelete = transactionId => {\n    dispatch(deleteTransaction(transactionId))\n      .then(() => {\n        dispatch(getTransactions());\n      })\n      .catch(error => {\n        console.error('Error while deleting the transaction:', error);\n      });\n  };\n\n  return (\n    <div>\n      <AddTransactionModal addTransaction={handleAddTransaction} />\n      <EditTransactionModal\n        editedTransaction={editedTransaction}\n        updateTransactionList={updateTransaction}\n      />\n      <Transactions\n        transactions={transactions}\n        onDelete={handleDelete}\n        onEdit={handleEdit}\n      />\n    </div>\n  );\n};\n\n// import React, { useState, useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { Transactions } from './Transactions/Transactions';\n// import { AddTransactionModal } from './ModalAddTransaction/ModalAddTransaction';\n// import { EditTransactionModal } from './ModalEditTransaction/ModalEditTransaction';\n// import { walletInstance } from 'utils/api';\n// import { selectIsModalEditTransactionOpen } from 'redux/global/selectors';\n// import { setIsModalEditTransactionOpen } from 'redux/global/globalSlice';\n\n// export const TransactionsManager = () => {\n//   const [transactions, setTransactions] = useState([]);\n//   const isEditModalOpen = useSelector(selectIsModalEditTransactionOpen);\n//   const dispatch = useDispatch();\n//   const [editedTransaction, setEditedTransaction] = useState(null);\n\n//   useEffect(() => {\n//     fetchTransactions();\n//   }, []);\n\n//   const fetchTransactions = async () => {\n//     try {\n//       const response = await walletInstance.get('/transactions');\n//       const fetchedTransactions = response.data.data.map(tr => ({\n//         _id: tr._id,\n//         date: tr.date ? new Date(tr.date).toLocaleDateString() : '',\n//         type: tr.type || '',\n//         category: tr.category ? tr.category.toString() : '',\n//         comment: tr.comment || '',\n//         sum: tr.sum ? tr.sum.toString() : '',\n//       }));\n//       setTransactions(fetchedTransactions);\n//     } catch (error) {\n//       console.error('Error fetching transactions', error);\n//     }\n//   };\n\n//   const addTransaction = newTransaction => {\n//     setTransactions(prevTransactions => [\n//       ...prevTransactions,\n//       {\n//         ...newTransaction,\n//         id: newTransaction._id,\n//       },\n//     ]);\n//     fetchTransactions();\n//   };\n\n//   const editTransaction = transaction => {\n//     setEditedTransaction({ ...transaction, _id: transaction._id }); // Dodaj '_id', jeśli nie istnieje\n//     dispatch(setIsModalEditTransactionOpen(true));\n//   };\n\n//   const updateTransactionList = updatedTransaction => {\n//     setTransactions(prevTransactions => {\n//       const newTransactions = prevTransactions.map(transaction =>\n//         transaction._id === updatedTransaction._id\n//           ? updatedTransaction\n//           : transaction\n//       );\n//       console.log('Zaktualizowane transakcje:', newTransactions);\n//       return newTransactions;\n//     });\n//   };\n\n//   const deleteTransaction = transaction => {\n//     setEditedTransaction({ ...transaction, _id: transaction.id });\n//   };\n\n//   return (\n//     <div>\n//       <AddTransactionModal addTransaction={addTransaction} />\n//       {isEditModalOpen && (\n//         <EditTransactionModal\n//           editedTransaction={editedTransaction}\n//           updateTransactionList={updateTransactionList}\n//         />\n//       )}\n//       <Transactions\n//         transactions={transactions}\n//         deleteTransaction={deleteTransaction}\n//         editTransaction={editTransaction}\n//       />\n//     </div>\n//   );\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"add_transaction_btn\":\"ButtonAddTransactions_add_transaction_btn__DAp3y\"};","import { useDispatch } from 'react-redux';\nimport css from './ButtonAddTransactions.module.scss';\nimport { setIsModalAddTransactionOpen } from 'redux/global/globalSlice';\n\nexport const ButtonAddTransactions = () => {\n  const dispatch = useDispatch();\n  const handleOpenAddTransactionModal = () => {\n    dispatch(setIsModalAddTransactionOpen(true));\n  };\n  return (\n    <button\n      onClick={handleOpenAddTransactionModal}\n      className={css.add_transaction_btn}\n    >\n      +\n    </button>\n  );\n};\n","import css from './Home.module.scss';\nimport { CurrencyTable } from 'components/CurrencyTable/CurrencyTable';\nimport { Balance } from 'components/Balance/Balance';\nimport Navigation from 'components/Navigation/Navigation';\nimport { TransactionsManager } from 'components/TransactionsManager/TransactionManager';\n//import React, { useState } from 'react';\nimport React from 'react';\nimport { ButtonAddTransactions } from 'components/ButtonAddTransactions/ButtonAddTransactions';\nimport { Helmet } from 'react-helmet';\n\nconst Home = () => {\n  //const [isModalOpen, setIsModalOpen] = useState(false);\n\n  return (\n    <div className={css.background}>\n      <Helmet>\n        <title>Home</title>\n      </Helmet>\n      <section className={css.dashboard_container}>\n        <div className={css.container}>\n          <div className={css.sidebar}>\n            <Navigation />\n            <Balance />\n            <CurrencyTable />\n          </div>\n          <div className={css.main}>\n            {/* <p>Add your first transaction</p> */}\n            <TransactionsManager />\n          </div>\n        </div>\n        <ButtonAddTransactions />\n      </section>\n    </div>\n  );\n};\n\nexport default Home;\n"],"names":["Balance","dispatch","useDispatch","userDetails","useSelector","selectUserDetails","userBalance","balance","useEffect","getUserDetails","_jsxs","className","css","children","_jsx","CurrencyTable","_useState","useState","_useState2","_slicedToArray","currencies","setCurrencies","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","walletInstance","sent","data","t0","console","error","stop","apply","arguments","map","currency","code","bid","ask","_id","to","resolvedPath","useResolvedPath","linkClass","useMatch","path","pathname","end","NavLink","ActiveNavLink","width","height","href","concat","sprite","Transactions","transactions","onDelete","onEdit","column","direction","sortOrder","setSortOrder","handleSort","sortColumn","onClick","title","transaction","dateString","date","Date","toLocaleDateString","undefined","year","month","day","type","category","comment","sum","transactionId","AddTransactionModal","addTransaction","initialValues","validationSchema","Yup","shape","positive","required","categories","setCategories","isAddTransactionModalOpen","selectIsModalAddTransactionOpen","fetchCategories","_ref2","fetchedCategories","handleCloseAddTransactionModal","setIsModalAddTransactionOpen","handleSubmit","_ref4","_callee2","values","_ref3","setSubmitting","resetForm","valuesToSend","_context2","toISOString","log","status","toast","finish","_x","_x2","Formik","onSubmit","_ref5","isSubmitting","setFieldValue","setValues","setErrors","Form","htmlFor","Field","name","id","_objectSpread","as","hidden","value","filter","ErrorMessage","component","placeholder","Datetime","onChange","dateFormat","timeFormat","Button","theme","disabled","EditTransactionModal","editedTransaction","updateTransactionList","typeError","isEditTransactionModalOpen","selectIsModalEditTransactionOpen","handleCloseEditTransactionModal","setIsModalEditTransactionOpen","split","submit","message","TransactionsManager","selectTransactions","isTransactionAdded","setTransactionAdded","_useState3","_useState4","setEditedTransaction","getTransactions","newTransactionData","addTransactionThunk","then","prevState","catch","updateTransaction","deleteTransaction","ButtonAddTransactions","Helmet","Navigation"],"sourceRoot":""}